# Generated by Django 5.1.7 on 2025-03-23 12:18

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('doctor', 'Doctor'), ('patient', 'Patient')], default='patient', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='doctor_profiles/')),
                ('specialization', models.CharField(default='General Practitioner', max_length=100)),
                ('experience_years', models.PositiveIntegerField(default=1)),
                ('hospital', models.CharField(default='Unknown Hospital', max_length=100)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='doctor_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='patient_profiles/')),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('medical_history', models.TextField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='patient_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='KidneyDiseasePrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('prediction_result', models.IntegerField(choices=[(0, 'Negative'), (1, 'Positive')], default=0)),
                ('probability', models.FloatField(default=50.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('age', models.IntegerField(default=30, validators=[django.core.validators.MinValueValidator(0)])),
                ('blood_pressure', models.IntegerField(default=80, validators=[django.core.validators.MinValueValidator(0)])),
                ('specific_gravity', models.FloatField(default=1.02, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('albumin', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(0)])),
                ('sugar', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('blood_glucose_random', models.IntegerField(default=120, validators=[django.core.validators.MinValueValidator(0)])),
                ('blood_urea', models.IntegerField(default=40, validators=[django.core.validators.MinValueValidator(0)])),
                ('serum_creatinine', models.FloatField(default=1.2, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('sodium', models.FloatField(default=140.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('potassium', models.FloatField(default=4.5, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('hemoglobin', models.FloatField(default=13.5, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('packed_cell_volume', models.IntegerField(default=40, validators=[django.core.validators.MinValueValidator(0)])),
                ('white_blood_cells', models.IntegerField(default=8000, validators=[django.core.validators.MinValueValidator(0)])),
                ('red_blood_cells', models.FloatField(default=4.5, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('hypertension', models.BooleanField(default=False)),
                ('diabetes_mellitus', models.BooleanField(default=False)),
                ('coronary_artery_disease', models.BooleanField(default=False)),
                ('appetite', models.BooleanField(default=True)),
                ('pedal_edema', models.BooleanField(default=False)),
                ('anemia', models.BooleanField(default=False)),
                ('red_blood_cells_normal', models.BooleanField(default=True)),
                ('pus_cells_normal', models.BooleanField(default=True)),
                ('pus_cell_clumps_present', models.BooleanField(default=False)),
                ('bacteria_present', models.BooleanField(default=False)),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='predictor.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='predictor.patient')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HeartDiseasePrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('prediction_result', models.IntegerField(choices=[(0, 'Negative'), (1, 'Positive')], default=0)),
                ('probability', models.FloatField(default=50.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('age', models.IntegerField(default=30, validators=[django.core.validators.MinValueValidator(0)])),
                ('sex', models.IntegerField(choices=[(0, 'Female'), (1, 'Male')], default=1)),
                ('cp', models.CharField(choices=[('0', 'Typical Angina'), ('1', 'Atypical Angina'), ('2', 'Non-Anginal Pain'), ('3', 'Asymptomatic')], default='0', max_length=1)),
                ('trestbps', models.IntegerField(default=120, validators=[django.core.validators.MinValueValidator(0)])),
                ('chol', models.IntegerField(default=200, validators=[django.core.validators.MinValueValidator(0)])),
                ('fbs', models.BooleanField(default=False)),
                ('restecg', models.IntegerField(default=0)),
                ('thalach', models.IntegerField(default=150, validators=[django.core.validators.MinValueValidator(0)])),
                ('exang', models.BooleanField(default=False)),
                ('oldpeak', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('slope', models.IntegerField(default=1)),
                ('ca', models.IntegerField(default=0)),
                ('thal', models.IntegerField(default=2)),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='predictor.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='predictor.patient')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DiabetesPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('prediction_result', models.IntegerField(choices=[(0, 'Negative'), (1, 'Positive')], default=0)),
                ('probability', models.FloatField(default=50.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('HighBP', models.IntegerField(default=0)),
                ('HighChol', models.IntegerField(default=0)),
                ('CholCheck', models.IntegerField(default=1)),
                ('BMI', models.FloatField(default=25.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('Smoker', models.IntegerField(default=0)),
                ('Stroke', models.IntegerField(default=0)),
                ('HeartDiseaseorAttack', models.IntegerField(default=0)),
                ('PhysActivity', models.IntegerField(default=1)),
                ('Fruits', models.IntegerField(default=1)),
                ('Veggies', models.IntegerField(default=1)),
                ('HvyAlcoholConsump', models.IntegerField(default=0)),
                ('AnyHealthcare', models.IntegerField(default=1)),
                ('NoDocbcCost', models.IntegerField(default=0)),
                ('GenHlth', models.IntegerField(default=3)),
                ('MentHlth', models.IntegerField(default=0)),
                ('PhysHlth', models.IntegerField(default=0)),
                ('DiffWalk', models.IntegerField(default=0)),
                ('Sex', models.IntegerField(default=0)),
                ('Age', models.IntegerField(default=30, validators=[django.core.validators.MinValueValidator(0)])),
                ('Education', models.IntegerField(default=4)),
                ('Income', models.IntegerField(default=3)),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='predictor.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='predictor.patient')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
